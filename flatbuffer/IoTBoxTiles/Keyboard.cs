// automatically generated by the FlatBuffers compiler, do not modify

namespace IoTBoxTiles
{

using System;
using FlatBuffers;

public struct Keyboard : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Keyboard GetRootAsKeyboard(ByteBuffer _bb) { return GetRootAsKeyboard(_bb, new Keyboard()); }
  public static Keyboard GetRootAsKeyboard(ByteBuffer _bb, Keyboard obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Keyboard __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Keys { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetKeysBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<Keyboard> CreateKeyboard(FlatBufferBuilder builder,
      StringOffset keysOffset = default(StringOffset)) {
    builder.StartObject(1);
    Keyboard.AddKeys(builder, keysOffset);
    return Keyboard.EndKeyboard(builder);
  }

  public static void StartKeyboard(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddKeys(FlatBufferBuilder builder, StringOffset keysOffset) { builder.AddOffset(0, keysOffset.Value, 0); }
  public static Offset<Keyboard> EndKeyboard(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Keyboard>(o);
  }
};


}
